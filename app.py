from flask import Flask, request, jsonify, render_template,request, redirect, url_for, session, jsonify
from werkzeug.security import check_password_hash
import mysql.connector
import os
import re
import pymysql
from dotenv import load_dotenv
import time


from flask_cors import CORS  # Import flask_cors

load_dotenv()

app = Flask(__name__)
app.secret_key = "1113"
CORS(app) 
CORS(app, resources={r"/*": {"origins": "http://127.0.0.1:5500"}})


# K·∫øt n·ªëi MySQL
MYSQL_HOST = "yamanote.proxy.rlwy.net"
MYSQL_USER = "root"
MYSQL_PASSWORD = "wTejdYhgNEchXKdbBdmAjBFxvOZrVAhy"
MYSQL_DB = "railway"
MYSQL_PORT = 21772  # Railway c·∫•p port ri√™ng

db = pymysql.connect(
    host=MYSQL_HOST,
    user=MYSQL_USER,
    password=MYSQL_PASSWORD,
    database=MYSQL_DB,
    port=MYSQL_PORT
)
cursor = db.cursor()

def handle_upgrade_downgrade(user_message):
    try:
        # X√°c ƒë·ªãnh h√†nh ƒë·ªông (n√¢ng c·∫•p ho·∫∑c h·∫° c·∫•p) d·ª±a tr√™n s·ª± so s√°nh dung l∆∞·ª£ng RAM
        action = None
        current_ram = 16  # Gi·∫£ s·ª≠ RAM hi·ªán t·∫°i l√† 16GB, c√≥ th·ªÉ l·∫•y t·ª´ c∆° s·ªü d·ªØ li·ªáu n·∫øu c·∫ßn
        
        # T√¨m dung l∆∞·ª£ng RAM mong mu·ªën
        ram_match = re.search(r'(\d+GB)', user_message)
        desired_ram = ram_match.group(0) if ram_match else None

        # N·∫øu kh√¥ng t√¨m th·∫•y dung l∆∞·ª£ng RAM mong mu·ªën trong c√¢u, tr·∫£ v·ªÅ th√¥ng b√°o l·ªói
        if not desired_ram:
            return "Xin l·ªói, t√¥i kh√¥ng th·ªÉ x√°c ƒë·ªãnh dung l∆∞·ª£ng RAM b·∫°n mu·ªën."

        # Chuy·ªÉn ƒë·ªïi desired_ram th√†nh d·∫°ng ƒë·∫ßy ƒë·ªß, v√≠ d·ª• "8GB" th√†nh "8GB RAM"
        desired_ram_full = f"{desired_ram} RAM"
        
        # T√¨m t√™n laptop
        match = re.search(r'(MacBook Air M2|MacBook Pro|Dell XPS 13|Asus ROG Zephyrus G14|HP|Lenovo)', user_message, re.IGNORECASE)
        laptop_name = match.group(0) if match else None
        print(f"Laptop detected: {laptop_name}")  # Debug log

        if not laptop_name:
            return "Xin l·ªói, t√¥i kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c t√™n laptop c·ªßa b·∫°n. H√£y nh·∫≠p ch√≠nh x√°c."

        print(f"üîç T√¨m laptop: {laptop_name}")  # Debug log

        # L·∫•y laptop_id t·ª´ database
        cursor.execute("SELECT id, brand, price, specifications, image_url FROM laptops WHERE name LIKE %s", (f"%{laptop_name}%",))
        laptop_info_result = cursor.fetchone()

        if not laptop_info_result:
            return f"Xin l·ªói, t√¥i kh√¥ng t√¨m th·∫•y th√¥ng tin cho {laptop_name}."

        laptop_id, brand, price, specifications, image_url = laptop_info_result
        print(f"Laptop ID: {laptop_id}")  # Debug log

        # Truy v·∫•n c√°c t√πy ch·ªçn n√¢ng c·∫•p RAM cho laptop n√†y
        cursor.execute("SELECT component_name, price_change FROM upgrades WHERE laptop_id = %s AND component_type = 'RAM'", (laptop_id,))
        upgrades = cursor.fetchall()

        if not upgrades:
            return f"Hi·ªán t·∫°i kh√¥ng c√≥ t√πy ch·ªçn {action} RAM n√†o cho {laptop_name}."

        # Danh s√°ch RAM c√≥ s·∫µn
        available_ram = {comp_name: price_change for comp_name, price_change in upgrades}
        print(f"Available RAM: {available_ram}")  # Debug log

        # Ki·ªÉm tra h√†nh ƒë·ªông n√¢ng c·∫•p hay h·∫° c·∫•p
        desired_ram_value = int(desired_ram.split('GB')[0])  # L·∫•y s·ªë GB t·ª´ desired_ram (v√≠ d·ª•: 32 t·ª´ "32GB")
        
        if desired_ram_value > current_ram:
            action = "n√¢ng c·∫•p"
        elif desired_ram_value < current_ram:
            action = "h·∫° c·∫•p"
        else:
            action = "gi·ªØ nguy√™n"  # Tr∆∞·ªùng h·ª£p kh√¥ng thay ƒë·ªïi RAM

        # Thay "l√™n" th√†nh "xu·ªëng" khi h·∫° c·∫•p
        direction = "l√™n" if action != "h·∫° c·∫•p" else "xu·ªëng"

        # Ki·ªÉm tra n·∫øu RAM mong mu·ªën c√≥ trong danh s√°ch
        if desired_ram_full in available_ram:
            price_change = available_ram[desired_ram_full]
            response = f"B·∫°n c√≥ th·ªÉ {action} RAM c·ªßa {laptop_name} {direction} {desired_ram} v·ªõi gi√° {price_change}$.\n"
            response += f"Th√¥ng tin laptop:\nH√£ng: {brand}, Gi√°: {price}$, Th√¥ng s·ªë: {specifications}, H√¨nh ·∫£nh: {image_url}"
        else:
            # N·∫øu kh√¥ng c√≥ trong danh s√°ch, hi·ªÉn th·ªã th√¥ng b√°o r√µ r√†ng
            response = f"{laptop_name} kh√¥ng h·ªó tr·ª£ {desired_ram} RAM. C√°c t√πy ch·ªçn c√≥ s·∫µn l√†:\n" + \
                       "\n".join([f"{ram} (Thay ƒë·ªïi gi√°: {price}$)" for ram, price in available_ram.items()])

        return response

    except Exception as e:
        return f"L·ªói khi x·ª≠ l√Ω y√™u c·∫ßu {action}: {str(e)}"

# Test ch·ª©c nƒÉng v·ªõi m·ªôt c√¢u l·ªánh v√≠ d·ª•
user_message = "N√¢ng c·∫•p RAM Asus ROG Zephyrus G14 l√™n 32GB."
response = handle_upgrade_downgrade(user_message)
print(response)


def handle_upgrade_downgrade_cpu(user_message):
    try:
        # X√°c ƒë·ªãnh h√†nh ƒë·ªông (n√¢ng c·∫•p ho·∫∑c h·∫° c·∫•p) d·ª±a tr√™n s·ª± so s√°nh CPU
        action = None
        current_cpu = "Intel i7"  # Gi·∫£ s·ª≠ CPU hi·ªán t·∫°i l√† Intel i7, c√≥ th·ªÉ l·∫•y t·ª´ c∆° s·ªü d·ªØ li·ªáu n·∫øu c·∫ßn
        
        # T√¨m CPU mong mu·ªën
        cpu_match = re.search(r'(Intel i3|Intel i5|Intel i7|-\d+|AMD Ryzen \d+)', user_message)
        desired_cpu = cpu_match.group(0) if cpu_match else None

        if not desired_cpu:
            return "Xin l·ªói, t√¥i kh√¥ng th·ªÉ x√°c ƒë·ªãnh CPU b·∫°n mu·ªën."

        # T√¨m t√™n laptop
        match = re.search(r'(MacBook Air M2|MacBook Pro|Dell XPS 13|Asus ROG Zephyrus G14|HP|Lenovo)', user_message, re.IGNORECASE)
        laptop_name = match.group(0) if match else None
        print(f"Laptop detected: {laptop_name}")  # Debug log

        if not laptop_name:
            return "Xin l·ªói, t√¥i kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c t√™n laptop c·ªßa b·∫°n. H√£y nh·∫≠p ch√≠nh x√°c."

        print(f"üîç T√¨m laptop: {laptop_name}")

        # L·∫•y laptop_id t·ª´ database
        cursor.execute("SELECT id, brand, price, specifications, image_url FROM laptops WHERE name LIKE %s", (f"%{laptop_name}%",))
        laptop_info_result = cursor.fetchone()

        if not laptop_info_result:
            return f"Xin l·ªói, t√¥i kh√¥ng t√¨m th·∫•y th√¥ng tin cho {laptop_name}."

        laptop_id, brand, price, specifications, image_url = laptop_info_result
        print(f"Laptop ID: {laptop_id}")
        # Truy v·∫•n c√°c t√πy ch·ªçn n√¢ng c·∫•p CPU cho laptop n√†y
        cursor.execute("SELECT component_name, price_change FROM upgrades WHERE laptop_id = %s AND component_type = 'CPU'", (laptop_id,))
        upgrades = cursor.fetchall()

        if not upgrades:
            return f"Hi·ªán t·∫°i kh√¥ng c√≥ t√πy ch·ªçn n√¢ng c·∫•p CPU n√†o cho {laptop_name}."

        # Danh s√°ch CPU c√≥ s·∫µn
        available_cpu = {comp_name: price_change for comp_name, price_change in upgrades}

        # Ki·ªÉm tra h√†nh ƒë·ªông n√¢ng c·∫•p hay h·∫° c·∫•p
        if desired_cpu in available_cpu:
            price_change = available_cpu[desired_cpu]
            response = f"B·∫°n c√≥ th·ªÉ n√¢ng c·∫•p CPU c·ªßa {laptop_name} l√™n {desired_cpu} v·ªõi gi√° {price_change}$.\n"
            response += f"Th√¥ng tin laptop:\nH√£ng: {brand}, Gi√°: {price}$, Th√¥ng s·ªë: {specifications}, H√¨nh ·∫£nh: {image_url}"
        else:
            # N·∫øu kh√¥ng c√≥ trong danh s√°ch, hi·ªÉn th·ªã th√¥ng b√°o r√µ r√†ng
            response = f"{laptop_name} kh√¥ng h·ªó tr·ª£ {desired_cpu} CPU. C√°c t√πy ch·ªçn c√≥ s·∫µn l√†:\n" + \
                       "\n".join([f"{cpu} (Thay ƒë·ªïi gi√°: {price}$)" for cpu, price in available_cpu.items()])

        return response

    except Exception as e:
        return f"L·ªói khi x·ª≠ l√Ω y√™u c·∫ßu CPU: {str(e)}"
    
# Test ch·ª©c nƒÉng v·ªõi m·ªôt c√¢u l·ªánh v√≠ d·ª•

user_message = "H·∫° c·∫•p CPU Dell XPS 13 xu·ªëng Intel i5."
response = handle_upgrade_downgrade_cpu(user_message)
print(response)

import re

def handle_upgrade_downgrade_gpu(user_message):
    try:
        # X√°c ƒë·ªãnh h√†nh ƒë·ªông (n√¢ng c·∫•p ho·∫∑c h·∫° c·∫•p) d·ª±a tr√™n s·ª± so s√°nh GPU
        action = None
        current_gpu = "RTX 3050"  # Gi·∫£ s·ª≠ GPU hi·ªán t·∫°i l√† NVIDIA GTX 1660 Ti, c√≥ th·ªÉ l·∫•y t·ª´ c∆° s·ªü d·ªØ li·ªáu n·∫øu c·∫ßn
        
        # T√¨m GPU mong mu·ªën (s·ª≠a regex ƒë·ªÉ kh√¥ng y√™u c·∫ßu s·ªë ph√≠a sau)
        gpu_match = re.search(r'(RTX 3050|RTX 3060|RTX 3070)', user_message)
        desired_gpu = gpu_match.group(0) if gpu_match else None

        if not desired_gpu:
            return "Xin l·ªói, t√¥i kh√¥ng th·ªÉ x√°c ƒë·ªãnh GPU b·∫°n mu·ªën."

        # T√¨m t√™n laptop
        match = re.search(r'(MacBook Air M2|MacBook Pro|Dell XPS 13|Asus ROG Zephyrus G15|MacBook Air M3|Asus ROG Zephyrus G11|MacBook Air M4|MacBook Air Pro M3|Lenovo)', user_message, re.IGNORECASE)
        laptop_name = match.group(0) if match else None

        if not laptop_name:
            return "Xin l·ªói, t√¥i kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c t√™n laptop c·ªßa b·∫°n. H√£y nh·∫≠p ch√≠nh x√°c."

        # L·∫•y laptop_id t·ª´ database
        cursor.execute("SELECT id, brand, price, specifications, image_url FROM laptops WHERE name LIKE %s", (f"%{laptop_name}%",))
        laptop_info_result = cursor.fetchone()

        if not laptop_info_result:
            return f"Xin l·ªói, t√¥i kh√¥ng t√¨m th·∫•y th√¥ng tin cho {laptop_name}."

        laptop_id, brand, price, specifications, image_url = laptop_info_result
        print(f"Laptop ID: {laptop_id}")

        # Truy v·∫•n c√°c t√πy ch·ªçn n√¢ng c·∫•p GPU cho laptop n√†y
        cursor.execute("SELECT component_name, price_change FROM upgrades WHERE laptop_id = %s AND component_type = 'GPU'", (laptop_id,))
        upgrades = cursor.fetchall()

        if not upgrades:
            return f"Hi·ªán t·∫°i kh√¥ng c√≥ t√πy ch·ªçn n√¢ng c·∫•p GPU n√†o cho {laptop_name}."

        # Danh s√°ch GPU c√≥ s·∫µn
        available_gpu = {comp_name: price_change for comp_name, price_change in upgrades}

        if desired_gpu in available_gpu:
            price_change = available_gpu[desired_gpu]
            response = f"B·∫°n c√≥ th·ªÉ n√¢ng c·∫•p GPU c·ªßa {laptop_name} l√™n {desired_gpu} v·ªõi gi√° {price_change}$.\n"
            response += f"Th√¥ng tin laptop:\nH√£ng: {brand}, Gi√°: {price}$, Th√¥ng s·ªë: {specifications}, H√¨nh ·∫£nh: {image_url}"
        else:
            response = f"{laptop_name} kh√¥ng h·ªó tr·ª£ {desired_gpu} GPU. C√°c t√πy ch·ªçn c√≥ s·∫µn l√†:\n" + \
                       "\n".join([f"{gpu} (Thay ƒë·ªïi gi√°: {price}$)" for gpu, price in available_gpu.items()])

        return response

    except Exception as e:
        return f"L·ªói khi x·ª≠ l√Ω y√™u c·∫ßu GPU: {str(e)}"

# Test ch·ª©c nƒÉng v·ªõi m·ªôt c√¢u l·ªánh v√≠ d·ª•
user_message = "H·∫° c·∫•p GPU Asus ROG Zephyrus G14 xu·ªëng RTX 3050."
response = handle_upgrade_downgrade_gpu(user_message)
print(response)


def handle_upgrade_downgrade_ssd(user_message):
    try:
        # X√°c ƒë·ªãnh h√†nh ƒë·ªông (n√¢ng c·∫•p ho·∫∑c h·∫° c·∫•p) d·ª±a tr√™n s·ª± so s√°nh SSD
        action = None
        current_ssd = 512  # Gi·∫£ s·ª≠ SSD hi·ªán t·∫°i l√† 512GB, c√≥ th·ªÉ l·∫•y t·ª´ c∆° s·ªü d·ªØ li·ªáu n·∫øu c·∫ßn
        
        # T√¨m dung l∆∞·ª£ng SSD mong mu·ªën
        ssd_match = re.search(r'(\d+GB)', user_message)
        desired_ssd = ssd_match.group(0) if ssd_match else None

        if not desired_ssd:
            return "Xin l·ªói, t√¥i kh√¥ng th·ªÉ x√°c ƒë·ªãnh dung l∆∞·ª£ng SSD b·∫°n mu·ªën."

        # Chuy·ªÉn ƒë·ªïi desired_ssd th√†nh d·∫°ng ƒë·∫ßy ƒë·ªß, v√≠ d·ª• "256GB SSD" th√†nh "256GB SSD"
        desired_ssd_full = desired_ssd

        # T√¨m t√™n laptop
        match = re.search(r'(MacBook Air M2|MacBook Pro|Dell XPS 13|Asus ROG Zephyrus G14|HP|Lenovo)', user_message, re.IGNORECASE)
        laptop_name = match.group(0) if match else None

        if not laptop_name:
            return "Xin l·ªói, t√¥i kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c t√™n laptop c·ªßa b·∫°n. H√£y nh·∫≠p ch√≠nh x√°c."

        # L·∫•y laptop_id t·ª´ database
        cursor.execute("SELECT id, brand, price, specifications, image_url FROM laptops WHERE name LIKE %s", (f"%{laptop_name}%",))
        laptop_info_result = cursor.fetchone()

        if not laptop_info_result:
            return f"Xin l·ªói, t√¥i kh√¥ng t√¨m th·∫•y th√¥ng tin cho {laptop_name}."

        laptop_id, brand, price, specifications, image_url = laptop_info_result
        print(f"Laptop ID: {laptop_id}")

        # Truy v·∫•n c√°c t√πy ch·ªçn n√¢ng c·∫•p SSD cho laptop n√†y
        cursor.execute("SELECT component_name, price_change FROM upgrades WHERE laptop_id = %s AND component_type = 'SSD'", (laptop_id,))
        upgrades = cursor.fetchall()

        if not upgrades:
            return f"Hi·ªán t·∫°i kh√¥ng c√≥ t√πy ch·ªçn n√¢ng c·∫•p SSD n√†o cho {laptop_name}."

        # Danh s√°ch SSD c√≥ s·∫µn
        available_ssd = {comp_name: price_change for comp_name, price_change in upgrades}

        # Ki·ªÉm tra h√†nh ƒë·ªông n√¢ng c·∫•p hay h·∫° c·∫•p
        desired_ssd_value = int(desired_ssd.split('GB')[0])  # L·∫•y s·ªë GB t·ª´ desired_ssd (v√≠ d·ª•: 256 t·ª´ "256GB SSD")
        
        if desired_ssd_value > current_ssd:
            action = "n√¢ng c·∫•p"
        elif desired_ssd_value < current_ssd:
            action = "h·∫° c·∫•p"
        else:
            action = "gi·ªØ nguy√™n"  # Tr∆∞·ªùng h·ª£p kh√¥ng thay ƒë·ªïi SSD

        # Thay "l√™n" th√†nh "xu·ªëng" khi h·∫° c·∫•p
        direction = "l√™n" if action != "h·∫° c·∫•p" else "xu·ªëng"

        # Ki·ªÉm tra n·∫øu SSD mong mu·ªën c√≥ trong danh s√°ch
        if desired_ssd_full in available_ssd:
            price_change = available_ssd[desired_ssd_full]
            response = f"B·∫°n c√≥ th·ªÉ {action} SSD c·ªßa {laptop_name} {direction} {desired_ssd} v·ªõi gi√° {price_change}$.\n"
            response += f"Th√¥ng tin laptop:\nH√£ng: {brand}, Gi√°: {price}$, Th√¥ng s·ªë: {specifications}, H√¨nh ·∫£nh: {image_url}"
        else:
            response = f"{laptop_name} kh√¥ng h·ªó tr·ª£ {desired_ssd} SSD. C√°c t√πy ch·ªçn c√≥ s·∫µn l√†:\n" + \
                       "\n".join([f"{ssd} (Thay ƒë·ªïi gi√°: {price}$)" for ssd, price in available_ssd.items()])

        return response

    except Exception as e:
        return f"L·ªói khi x·ª≠ l√Ω y√™u c·∫ßu SSD: {str(e)}"
    
# Test ch·ª©c nƒÉng v·ªõi m·ªôt c√¢u l·ªánh v√≠ d·ª•

user_message = "H·∫° c·∫•p SSD Dell XPS 13 xu·ªëng 256GB."
response = handle_upgrade_downgrade_ssd(user_message)
print(response)

# API x·ª≠ l√Ω chat v·ªõi AI
app.config['ALLOWED_EXTENSIONS'] = {'png', 'jpg', 'jpeg', 'gif'}

@app.route('/chat', methods=['POST'])
def chat():
    try:
        data = request.get_json()
        if not data or "message" not in data:
            return jsonify({"error": "Invalid request"}), 400

        user_message = data["message"]

        # üîç L·∫•y danh s√°ch t·∫•t c·∫£ laptop t·ª´ database
        cursor.execute("SELECT name FROM laptops")
        all_laptops = [row[0] for row in cursor.fetchall()]

        exact_laptop_name = None
        for laptop in all_laptops:
            if laptop.lower() in user_message.lower():
                exact_laptop_name = laptop
                break

        # üîπ Ki·ªÉm tra c√≥ ph·∫£i c√¢u h·ªèi v·ªÅ n√¢ng c·∫•p kh√¥ng?
        is_upgrade_request = any(keyword in user_message.lower() for keyword in ["n√¢ng c·∫•p", "h·∫° c·∫•p"])

        if exact_laptop_name and not is_upgrade_request:
            # üñ• N·∫øu nh·∫≠p ch√≠nh x√°c model laptop -> l·∫•y th√¥ng tin laptop
            cursor.execute("SELECT name, brand, price, specifications, image_url FROM laptops WHERE name = %s", (exact_laptop_name,))
            laptop = cursor.fetchone()

            if laptop:
                name, brand, price, specifications, image_url = laptop
                response_text = f"üìå **{name}**\n H√£ng: {brand}\n Gi√°: {price}$\n Th√¥ng s·ªë: {specifications}\n üñº H√¨nh ·∫£nh: {image_url}"
            else:
                response_text = "Xin l·ªói, t√¥i kh√¥ng t√¨m th·∫•y th√¥ng tin v·ªÅ laptop n√†y."

        elif not exact_laptop_name and not is_upgrade_request:
            # üîπ N·∫øu ch·ªâ nh·∫≠p th∆∞∆°ng hi·ªáu (VD: MacBook) -> tr·∫£ v·ªÅ danh s√°ch laptop c√πng th∆∞∆°ng hi·ªáu
            brand = None
            for b in ["MacBook", "Dell", "Asus", "HP", "Lenovo"]:
                if b.lower() in user_message.lower():
                    brand = b
                    break

            if brand:
                cursor.execute("SELECT name, brand, price, specifications, image_url FROM laptops WHERE brand LIKE %s", (f"%{brand}%",))
                results = cursor.fetchall()

                if results:
                    laptop_list = [f"üìå **{row[0]}**\n Gi√°: {row[2]}$\n Th√¥ng s·ªë: {row[3]}\n üñº H√¨nh ·∫£nh: {row[4]}" for row in results]
                    response_text = "\n\n".join(laptop_list)
                else:
                    response_text = f"Xin l·ªói, t√¥i kh√¥ng t√¨m th·∫•y laptop n√†o thu·ªôc th∆∞∆°ng hi·ªáu {brand}."
            else:
                response_text = "Xin l·ªói, t√¥i kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c laptop b·∫°n mu·ªën t√¨m."

        elif exact_laptop_name and is_upgrade_request:
            # üîß X·ª≠ l√Ω n√¢ng c·∫•p ph·∫ßn c·ª©ng
            cursor.execute("SELECT id FROM laptops WHERE name = %s", (exact_laptop_name,))
            laptop_id_result = cursor.fetchone()

            if not laptop_id_result:
                return jsonify({"response": "Kh√¥ng t√¨m th·∫•y laptop ƒë·ªÉ n√¢ng c·∫•p."})

            laptop_id = laptop_id_result[0]

            # üîé T√¨m ph·∫ßn c·ª©ng mu·ªën n√¢ng c·∫•p
            components_regex = {
                "RAM": r'(RAM\s*\d+GB|\d+GB\s*RAM)',
                "GPU": r'(RTX \d{3,4}|GTX \d{3,4}|Intel UHD Graphics)',
                "CPU": r'(Intel \w+\d+|AMD \w+\d+|Ryzen \d+|Apple M[1-3])',
                "SSD": r'(\d+\s*(GB|TB)\s*SSD?)',
            }

            components_info = {}

            for component, pattern in components_regex.items():
                component_match = re.search(pattern, user_message, re.IGNORECASE)
                if component_match:
                    desired_component = component_match.group(0).strip().lower()

                    # T√¨m linh ki·ªán t∆∞∆°ng ·ª©ng
                    cursor.execute("SELECT component_name, price_change FROM upgrades WHERE laptop_id = %s AND component_type = %s", 
                                   (laptop_id, component))
                    upgrades = cursor.fetchall()

                    available_components = {comp_name.strip().lower(): price_change for comp_name, price_change in upgrades}

                    if desired_component in available_components:
                        price_change = available_components[desired_component]
                        if price_change > 0:
                            components_info[component] = f"‚úÖ B·∫°n c√≥ th·ªÉ **n√¢ng c·∫•p** {component} l√™n {desired_component.upper()} v·ªõi gi√° {price_change}$."
                        elif price_change < 0:
                            components_info[component] = f"‚ùé B·∫°n c√≥ th·ªÉ **h·∫° c·∫•p** {component} xu·ªëng {desired_component.upper()} v√† ti·∫øt ki·ªám {abs(price_change)}$."
                        else:
                            components_info[component] = f"‚ÑπÔ∏è {exact_laptop_name} ƒë√£ c√≥ {desired_component.upper()}, kh√¥ng c√≥ thay ƒë·ªïi v·ªÅ gi√°."
                    else:
                        available_options = "\n".join([f"- {comp.upper()} (Thay ƒë·ªïi gi√°: {price}$)" for comp, price in available_components.items()])
                        components_info[component] = f"‚ö†Ô∏è {exact_laptop_name} kh√¥ng h·ªó tr·ª£ {desired_component.upper()}.\n C√°c t√πy ch·ªçn {component} c√≥ s·∫µn:\n{available_options}"

            # üéØ K·∫øt h·ª£p th√¥ng tin n√¢ng c·∫•p
            response_text = f"üìå **{exact_laptop_name}** - N√¢ng c·∫•p ph·∫ßn c·ª©ng:\n"
            for component, info in components_info.items():
                response_text += f"{info}\n"

        else:
            response_text = "Xin l·ªói, t√¥i kh√¥ng th·ªÉ hi·ªÉu y√™u c·∫ßu c·ªßa b·∫°n."

        # üìù L∆∞u l·ªãch s·ª≠ h·ªôi tho·∫°i v√†o database
        if "user_id" in data:
            cursor.execute("INSERT INTO chatbot_history (user_id, message, response) VALUES (%s, %s, %s)", 
                           (data["user_id"], user_message, response_text))
        else:
            cursor.execute("INSERT INTO chatbot_history (message, response) VALUES (%s, %s)", 
                           (user_message, response_text))
        db.commit()

        return jsonify({"response": response_text})
    
    except Exception as e:
        return jsonify({"error": str(e)}), 500
    
# Ki·ªÉm tra file upload c√≥ h·ª£p l·ªá kh√¥ng
def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in app.config['ALLOWED_EXTENSIONS']

# API l·∫•y l·ªãch s·ª≠ h·ªôi tho·∫°i
@app.route('/history', methods=['GET'])
def get_history():
    cursor.execute("SELECT message, response FROM chatbot_history ORDER BY id DESC LIMIT 10")
    history = cursor.fetchall()
    history_list = [{"message": msg, "response": resp} for msg, resp in history]
    return jsonify({"history": history_list}) 

# Trang ch·ªß (Chatbot)
@app.route('/')
def index():
    return render_template('index.html')

@app.route("/test_db")
def test_db():
    try:
        cursor.execute("SELECT DATABASE()")
        db_name = cursor.fetchone()
        return jsonify({"message": "K·∫øt n·ªëi MySQL th√†nh c√¥ng!", "database": db_name[0]})
    except Exception as e:
        return jsonify({"error": str(e)}), 500
    
# Trang Admin
@app.route('/admin')
def admin():
    # Thay v√¨ ki·ªÉm tra ƒëƒÉng nh·∫≠p, ng∆∞·ªùi d√πng s·∫Ω tr·ª±c ti·∫øp v√†o trang admin
    return render_template('admin.html')
    

# API th√™m laptop
# API l·∫•y danh s√°ch laptop
@app.route('/get_laptops', methods=['GET'])
def get_laptops():
    cursor.execute("SELECT * FROM laptops")
    laptops = cursor.fetchall()

    laptop_list = [
        {
            "id": laptop[0],
            "name": laptop[1],
            "brand": laptop[2],
            "price": laptop[3],
            "specifications": laptop[4],
            "image_url": f"http://localhost:5000/static/images/{os.path.basename(laptop[5])}" if laptop[5] else None
        }
        for laptop in laptops
    ]

    print(laptop_list)  # Ki·ªÉm tra d·ªØ li·ªáu
    return jsonify({"laptops": laptop_list})

# API th√™m laptop
@app.route('/add_laptop', methods=['POST'])
def add_laptop():
    data = request.form
    name = data.get('name')
    brand = data.get('brand')
    price = data.get('price')
    specifications = data.get('specifications')
    image_url = request.files.get('image_url')

    image_filename = None  # M·∫∑c ƒë·ªãnh kh√¥ng c√≥ ·∫£nh

    if image_url:
        allowed_extensions = {"png", "jpg", "jpeg"}
        ext = image_url.filename.split('.')[-1].lower()
        if ext not in allowed_extensions:
            return jsonify({"error": "Ch·ªâ h·ªó tr·ª£ ·∫£nh PNG, JPG, JPEG"}), 400
        
        image_folder = 'static/images'
        if not os.path.exists(image_folder):
            os.makedirs(image_folder)

        # ƒê·ªïi t√™n file ·∫£nh tr√°nh tr√πng l·∫∑p
        image_filename = f"{int(time.time())}_{image_url.filename}"
        image_path = os.path.join(image_folder, image_filename)
        image_url.save(image_path)

    # Ch√®n v√†o database
    cursor.execute(
        "INSERT INTO laptops (name, brand, price, specifications, image_url) VALUES (%s, %s, %s, %s, %s)",
        (name, brand, price, specifications, image_filename)
    )
    db.commit()
    
    return jsonify({"message": "Laptop ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng!"})

# API x√≥a laptop
@app.route('/delete_laptop/<int:laptop_id>', methods=['DELETE'])
def delete_laptop(laptop_id):
    # L·∫•y ·∫£nh c≈© ƒë·ªÉ x√≥a file
    cursor.execute("SELECT image_url FROM laptops WHERE id = %s", (laptop_id,))
    laptop = cursor.fetchone()

    if not laptop:
        return jsonify({"error": "Laptop kh√¥ng t·ªìn t·∫°i"}), 404

    image_filename = laptop[0]

    # X√≥a laptop trong database
    cursor.execute("DELETE FROM laptops WHERE id=%s", (laptop_id,))
    db.commit()

    # X√≥a ·∫£nh n·∫øu c√≥
    if image_filename:
        image_path = os.path.join('static/images', image_filename)
        if os.path.exists(image_path):
            os.remove(image_path)

    return jsonify({"message": "Laptop ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!"})

# API ch·ªânh s·ª≠a laptop
@app.route('/update_laptop/<int:laptop_id>', methods=['POST', 'PUT'])
def update_laptop(laptop_id):
    data = request.form
    name = data.get('name')
    brand = data.get('brand')
    price = data.get('price')
    specifications = data.get('specifications')
    image_file = request.files.get('image_url')

    # L·∫•y th√¥ng tin laptop hi·ªán t·∫°i
    cursor.execute("SELECT * FROM laptops WHERE id = %s", (laptop_id,))
    laptop = cursor.fetchone()

    if not laptop:
        return jsonify({"error": "Laptop kh√¥ng t·ªìn t·∫°i"}), 404

    image_filename = laptop[5]  # Gi·ªØ ·∫£nh c≈© n·∫øu kh√¥ng c√≥ ·∫£nh m·ªõi

    if image_file:
        # Ki·ªÉm tra ƒë·ªãnh d·∫°ng file ·∫£nh
        allowed_extensions = {"png", "jpg", "jpeg"}
        ext = image_file.filename.rsplit('.', 1)[-1].lower()
        if ext not in allowed_extensions:
            return jsonify({"error": "Ch·ªâ h·ªó tr·ª£ ·∫£nh PNG, JPG, JPEG"}), 400

        image_folder = 'static/images'
        os.makedirs(image_folder, exist_ok=True)

        # T·∫°o t√™n file m·ªõi tr√°nh tr√πng l·∫∑p
        new_image_filename = f"{int(time.time())}_{image_file.filename}"
        image_path = os.path.join(image_folder, new_image_filename)
        
        try:
            image_file.save(image_path)  # L∆∞u ·∫£nh m·ªõi
            if image_filename:  # N·∫øu c√≥ ·∫£nh c≈©, x√≥a ·∫£nh c≈©
                old_image_path = os.path.join(image_folder, image_filename)
                if os.path.exists(old_image_path):
                    os.remove(old_image_path)

            image_filename = new_image_filename  # C·∫≠p nh·∫≠t ·∫£nh m·ªõi
        except Exception as e:
            return jsonify({"error": f"L·ªói l∆∞u ·∫£nh: {str(e)}"}), 500

    # C·∫≠p nh·∫≠t th√¥ng tin laptop
    try:
        cursor.execute("""
            UPDATE laptops
            SET name = %s, brand = %s, price = %s, specifications = %s, image_url = %s
            WHERE id = %s
        """, (
            name or laptop[1], 
            brand or laptop[2], 
            price or laptop[3], 
            specifications or laptop[4], 
            image_filename,
            laptop_id
        ))

        db.commit()
        return jsonify({"message": "Laptop ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!"})
    except Exception as e:
        return jsonify({"error": f"L·ªói c·∫≠p nh·∫≠t d·ªØ li·ªáu: {str(e)}"}), 500

if __name__ == '__main__':
    app.run(debug=True)